// <auto-generated />
using System;
using Infra.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infra.Data.Migrations
{
    [DbContext(typeof(RGRContext))]
    [Migration("20241003231208_RGR000005")]
    partial class RGR000005
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Dominio.Entidades.Auditoria.HistoricoObjeto", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("Acao")
                        .HasColumnType("integer");

                    b.Property<long>("CodigoObjeto")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Data")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DescricaoAcao")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("DescricaoObjeto")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("IP")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Objeto")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("OrigemAuditado")
                        .HasColumnType("integer");

                    b.Property<int>("TipoAuditado")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("HistoricoObjeto", (string)null);
                });

            modelBuilder.Entity("Dominio.Entidades.Auditoria.HistoricoPropriedade", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("De")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<long>("HistoricoObjetoId")
                        .HasColumnType("bigint");

                    b.Property<string>("Para")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("Propriedade")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.HasIndex("HistoricoObjetoId");

                    b.ToTable("HistoricoPropriedade", (string)null);
                });

            modelBuilder.Entity("Dominio.Entidades.Localidades.Localidade", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Bairro")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Cep")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Cidade")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Logradouro")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Uf")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Localidade", (string)null);
                });

            modelBuilder.Entity("Dominio.Entidades.Pessoas.Motorista", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("CNH")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Motorista");
                });

            modelBuilder.Entity("Dominio.Entidades.Pessoas.Passageiros.Passageiro", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("CPF")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("LocalidadeId")
                        .HasColumnType("bigint");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Sexo")
                        .HasColumnType("integer");

                    b.Property<string>("Telefone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("LocalidadeId");

                    b.ToTable("Passageiro", (string)null);
                });

            modelBuilder.Entity("Dominio.Entidades.Veiculos.ModeloVeicular", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("CapacidadeMaxima")
                        .HasColumnType("integer");

                    b.Property<bool>("DescricaoModelo")
                        .HasColumnType("boolean");

                    b.Property<int>("PassageirosEmPe")
                        .HasColumnType("integer");

                    b.Property<bool>("PossuiBanheiro")
                        .HasColumnType("boolean");

                    b.Property<bool>("PossuiClimatizador")
                        .HasColumnType("boolean");

                    b.Property<int>("QuantidadeAssento")
                        .HasColumnType("integer");

                    b.Property<int>("QuantidadeEixo")
                        .HasColumnType("integer");

                    b.Property<bool>("Situacao")
                        .HasColumnType("boolean");

                    b.Property<int>("Tipo")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("ModeloVeicular", (string)null);
                });

            modelBuilder.Entity("Dominio.Entidades.Veiculos.Veiculo", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("AnoFabricacao")
                        .HasColumnType("integer");

                    b.Property<int>("AnoModelo")
                        .HasColumnType("integer");

                    b.Property<string>("Cor")
                        .HasColumnType("text");

                    b.Property<string>("Marca")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Modelo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long?>("ModeloVeiculoId")
                        .HasColumnType("bigint");

                    b.Property<string>("NumeroChassi")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Observacao")
                        .HasColumnType("text");

                    b.Property<string>("Placa")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Renavam")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int>("TipoCombustivel")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("VencimentoLicenciamento")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ModeloVeiculoId");

                    b.ToTable("Veiculo", (string)null);
                });

            modelBuilder.Entity("Dominio.Entidades.Viagens.Gatilho.GatilhoViagem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<bool>("Ativo")
                        .HasColumnType("boolean");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("DestinoId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("Distancia")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("HorarioChegada")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("HorarioSaida")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("MotoristaId")
                        .HasColumnType("bigint");

                    b.Property<long>("OrigemId")
                        .HasColumnType("bigint");

                    b.Property<long>("VeiculoId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("DestinoId");

                    b.HasIndex("MotoristaId");

                    b.HasIndex("OrigemId");

                    b.HasIndex("VeiculoId");

                    b.ToTable("GatilhoViagem", (string)null);
                });

            modelBuilder.Entity("Dominio.Entidades.Viagens.Viagem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("CodigoViagem")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("DataViagem")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("DestinoId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("Distancia")
                        .HasColumnType("numeric");

                    b.Property<bool>("Excesso")
                        .HasColumnType("boolean");

                    b.Property<long?>("GatilhoViagemId")
                        .HasColumnType("bigint");

                    b.Property<long?>("GatinhoViagemId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("HorarioChegada")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("HorarioSaida")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Lotado")
                        .HasColumnType("boolean");

                    b.Property<long>("MotoristaId")
                        .HasColumnType("bigint");

                    b.Property<int>("NumeroPassageiros")
                        .HasColumnType("integer");

                    b.Property<long>("OrigemId")
                        .HasColumnType("bigint");

                    b.Property<int>("Situacao")
                        .HasColumnType("integer");

                    b.Property<long>("VeiculoId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("DestinoId");

                    b.HasIndex("GatilhoViagemId");

                    b.HasIndex("GatinhoViagemId");

                    b.HasIndex("MotoristaId");

                    b.HasIndex("OrigemId");

                    b.HasIndex("VeiculoId");

                    b.ToTable("Viagem", (string)null);
                });

            modelBuilder.Entity("Dominio.Entidades.Viagens.ViagemPassageiro", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("PassageiroId")
                        .HasColumnType("bigint");

                    b.Property<long>("ViagemId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("PassageiroId");

                    b.HasIndex("ViagemId");

                    b.ToTable("ViagemPassageiro", (string)null);
                });

            modelBuilder.Entity("Dominio.Entidades.Viagens.ViagemPosicao", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("DataHora")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Latitude")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Longitude")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("ViagemId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ViagemId");

                    b.ToTable("ViagemPosicao", (string)null);
                });

            modelBuilder.Entity("Dominio.Entidades.Auditoria.HistoricoPropriedade", b =>
                {
                    b.HasOne("Dominio.Entidades.Auditoria.HistoricoObjeto", "HistoricoObjeto")
                        .WithMany("HistoricoPropriedade")
                        .HasForeignKey("HistoricoObjetoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HistoricoObjeto");
                });

            modelBuilder.Entity("Dominio.Entidades.Pessoas.Passageiros.Passageiro", b =>
                {
                    b.HasOne("Dominio.Entidades.Localidades.Localidade", "Localidade")
                        .WithMany()
                        .HasForeignKey("LocalidadeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Localidade");
                });

            modelBuilder.Entity("Dominio.Entidades.Veiculos.Veiculo", b =>
                {
                    b.HasOne("Dominio.Entidades.Veiculos.ModeloVeicular", "ModeloVeiculo")
                        .WithMany("Veiculos")
                        .HasForeignKey("ModeloVeiculoId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ModeloVeiculo");
                });

            modelBuilder.Entity("Dominio.Entidades.Viagens.Gatilho.GatilhoViagem", b =>
                {
                    b.HasOne("Dominio.Entidades.Localidades.Localidade", "Destino")
                        .WithMany()
                        .HasForeignKey("DestinoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dominio.Entidades.Pessoas.Motorista", "Motorista")
                        .WithMany()
                        .HasForeignKey("MotoristaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dominio.Entidades.Localidades.Localidade", "Origem")
                        .WithMany()
                        .HasForeignKey("OrigemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dominio.Entidades.Veiculos.Veiculo", "Veiculo")
                        .WithMany()
                        .HasForeignKey("VeiculoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Destino");

                    b.Navigation("Motorista");

                    b.Navigation("Origem");

                    b.Navigation("Veiculo");
                });

            modelBuilder.Entity("Dominio.Entidades.Viagens.Viagem", b =>
                {
                    b.HasOne("Dominio.Entidades.Localidades.Localidade", "Destino")
                        .WithMany()
                        .HasForeignKey("DestinoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dominio.Entidades.Viagens.Gatilho.GatilhoViagem", null)
                        .WithMany("Viagem")
                        .HasForeignKey("GatilhoViagemId");

                    b.HasOne("Dominio.Entidades.Viagens.Gatilho.GatilhoViagem", "GatinhoViagem")
                        .WithMany()
                        .HasForeignKey("GatinhoViagemId");

                    b.HasOne("Dominio.Entidades.Pessoas.Motorista", "Motorista")
                        .WithMany()
                        .HasForeignKey("MotoristaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dominio.Entidades.Localidades.Localidade", "Origem")
                        .WithMany()
                        .HasForeignKey("OrigemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dominio.Entidades.Veiculos.Veiculo", "Veiculo")
                        .WithMany()
                        .HasForeignKey("VeiculoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Destino");

                    b.Navigation("GatinhoViagem");

                    b.Navigation("Motorista");

                    b.Navigation("Origem");

                    b.Navigation("Veiculo");
                });

            modelBuilder.Entity("Dominio.Entidades.Viagens.ViagemPassageiro", b =>
                {
                    b.HasOne("Dominio.Entidades.Pessoas.Passageiros.Passageiro", "Passageiro")
                        .WithMany()
                        .HasForeignKey("PassageiroId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dominio.Entidades.Viagens.Viagem", "Viagem")
                        .WithMany()
                        .HasForeignKey("ViagemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Passageiro");

                    b.Navigation("Viagem");
                });

            modelBuilder.Entity("Dominio.Entidades.Viagens.ViagemPosicao", b =>
                {
                    b.HasOne("Dominio.Entidades.Viagens.Viagem", "Viagem")
                        .WithMany()
                        .HasForeignKey("ViagemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Viagem");
                });

            modelBuilder.Entity("Dominio.Entidades.Auditoria.HistoricoObjeto", b =>
                {
                    b.Navigation("HistoricoPropriedade");
                });

            modelBuilder.Entity("Dominio.Entidades.Veiculos.ModeloVeicular", b =>
                {
                    b.Navigation("Veiculos");
                });

            modelBuilder.Entity("Dominio.Entidades.Viagens.Gatilho.GatilhoViagem", b =>
                {
                    b.Navigation("Viagem");
                });
#pragma warning restore 612, 618
        }
    }
}
